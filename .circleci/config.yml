version: 2.1

awsimg: &awsimg
  docker:
    - image: cimg/aws:2023.06
pyimg: &pyimg
  docker:
    - image: cimg/python:3.11.4
nodeimg: &nodeimg
  docker:
    - image: cimg/node:13.8.0
orbs:
  slack: circleci/slack@4.12.5

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.   
    parameters:
      stack-name:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            if aws s3 ls | grep udapeople-${CIRCLE_WORKFLOW_ID:0:7}; then
              aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            fi
            aws cloudformation delete-stack --stack-name <<parameters.stack-name>>
  
  # revert-migrations:
  #   description: Revert the last migration
  #   parameters:
  #     workflow_id:
  #         type: string      
  #   steps:
  #     - run:
  #         name: Revert migrations
  #         when: on_fail
  #         command: |
  #           STATUS=$(curl --insecure  https://kvdb.io/Sj1ZGcheHT6dsgnb9VhaLX/migration_<<parameters.workflow_id>>)
  #           if (( $STATUS == 1 ));
  #           then
  #               cd ~/project/backend
  #               npm install
  #               npm run migration:revert
  #           fi    
# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here 
#       workflow_id:
#         type: string
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             # Your code here
#             # exit 1
#             aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}


#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here 
#       workflow_id:
#         type: string    
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:
  install-frontend:
    << : *nodeimg
    steps:
      - checkout
      - run:
          name: Front-end install
          command: |
            cd frontend
            npm install
            ls -ls
      - slack/notify:
          event: "fail"
      - persist_to_workspace:
          root: .
          paths: 
            - "./frontend/node_modules"

  install-backend:
    << : *nodeimg
    steps:
      - checkout
      - run:
          name: Back-end install 
          command: |
            ls -la
            pwd
            cd backend
            npm install
            pwd
            ls -la
      - slack/notify:
          event: "fail"
      - persist_to_workspace:
          root: .
          paths: 
            - "./backend/node_modules"

  build-frontend:
    << : *nodeimg
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Front-end build
          command: |
            ls -la
            cd frontend
            ls -ls ../
            npm run build
      - slack/notify:
          event: "fail"
      - persist_to_workspace:
          root: .
          paths: 
            - "./frontend/dist"
  
  build-backend:
    << : *nodeimg
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Back-end build
          command: |
            ls -la
            cd backend
            ls -la ../
            npm run build
      - slack/notify:
          event: "fail"
      - persist_to_workspace:
          root: .
          paths: 
            - "./backend/dist"

  test-frontend:
    << : *nodeimg
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Testing frontend
          command: |
            cd frontend
            npm run test
      - slack/notify:
          event: "fail"
                
  test-backend:
    << : *nodeimg
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Testing backend
          command: | 
            cd backend
            npm run test
      - slack/notify:
          event: "fail"

  scan-frontend:
    << : *nodeimg
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Scanning frontend
          working_directory: ./frontend
          command: | 
            ls -la
            pwd
            npm audit fix --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: "fail"

  scan-backend:
    << : *nodeimg
    steps:
    - checkout
    - attach_workspace:
        at: .
    - run:
        name: Scanning backend
        working_directory: ./backend
        command: | 
            ls -la  
            pwd
            npm audit fix --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
    - slack/notify:
        event: "fail"

  deploy-infrastructure:
    << : *awsimg
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          stack-name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          stack-name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
  
  configure-infrastructure:
    << : *pyimg
    environment:
      NODE_ENV: "production"
      VERSION: "1"
      ENVIRONMENT: "production"
      TYPEORM_CONNECTION: $TYPEORM_CONNECTION
      TYPEORM_HOST: $TYPEORM_HOST
      TYPEORM_USERNAME: $TYPEORM_USERNAME
      TYPEORM_PASSWORD: $TYPEORM_PASSWORD
      TYPEORM_DATABASE: $TYPEORM_DATABASE
      TYPEORM_PORT: $TYPEORM_PORT
      TYPEORM_ENTITIES: $TYPEORM_ENTITIES
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0a:ac:67:16:15:3d:4d:75:87:38:d5:7c:f5:cf:f3:86"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apt update
            apt-get -y install ansible
            apt-get -y install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          stack-name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  # run-migrations:
  #   docker:
  #     # Docker image here that supports NodeJS
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Run migrations
  #         command: |
  #           # Your code here
  #           exit 1
  #     - run:
  #         name: Send migration results to memstash
  #         command: |
  #           # Your code here
  #           exit 1
  #    # Here's where you will add some code to rollback on failure      

  # deploy-frontend:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "${API_URL}"
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure      
                    
  # deploy-backend:
  #   docker:
  #     # Docker image here that supports Ansible
  #   steps:
  #     # Checkout code from git
  #     # Add ssh keys with fingerprint
  #     # attach workspace
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

  # smoke-test:
  #   docker:
  #     # Lightweight Docker image 
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           # your code here
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #     - image: amazon/aws-cli
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

  # cleanup:
  #     docker:
  #       # Docker image here
  #       - image: amazon/aws-cli
  #     steps:
  #       # Checkout code from git
  #       - run:
  #           name: Get old stack workflow id
  #           command: |
  #             # your code here
  #             export OldWorkflowID="the id here"
  #             export STACKS=[] #put the list of stacks here
  #       - run:
  #           name: Remove old stacks and files
  #           command: |
  #             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #             then
  #               # your code here
  #             fi
            

workflows:
  master-build:
    jobs:
      - install-frontend
      - install-backend
      - build-frontend:
          requires: [install-frontend]
      - build-backend:
          requires: [install-backend]
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]