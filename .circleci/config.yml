version: 2.1

# awsimg: &awsimg
#   docker:
#     - image: cimg/aws:2023.06
# pyimg: &pyimg
#   docker:
#     - image: cimg/python:3.10.2
nodeimg: &nodeimg
  docker:
    - image: cimg/node:13.8.0

# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here 
#       workflow_id:
#         type: string
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             # Your code here
#             # exit 1
#             aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}


#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here 
#       workflow_id:
#         type: string    
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:
  build-frontend:
    << : *nodeimg
    steps:
      - checkout
      - run:
          name: Front-end install and build
          working_directory: ./frontend
          command: |
            npm install
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
            - frontend/node_modules

  build-backend:
    << : *nodeimg
    steps:
      - checkout
      - run:
          name: Back-end install and build
          working_directory: ./backend
          command: |
            npm install
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist
            - backend/node_modules

  test-frontend:
    << : *nodeimg
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Testing frontend
          working_directory: ./frontend
          command: |
            npm run test
                
  test-backend:
    << : *nodeimg
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Testing backend
          working_directory: ./backend
          command: | 
            npm run test
            
  scan-frontend:
    << : *nodeimg
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Scanning frontend
          working_directory: ./frontend
          command: | 
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    << : *nodeimg
    steps:
    - checkout
    - attach_workspace:
        at: .
    - run:
        name: Scanning backend
        working_directory: ./backend
        command: |   
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  # deploy-infrastructure:
  #   << : *awsimg
  #   steps:
  #     - checkout
  #     # - dependencies
  #     - run:
  #         name: Ensure back-end infrastructure exists
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/backend.yml \
  #             #--tags project=your-tag \
  #             # --stack-name "your back-end stack name with workflow id" \
  #             # --parameter-overrides ID="your workflow id"  
  #             exit 1
  #     - run:
  #         name: Ensure front-end infrastructure exist
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/frontend.yml \
  #             #--tags project=your-tag \
  #             # --stack-name "your front-end stack name with workflow id" \
  #             # --parameter-overrides ID="your workflow id"  
  #             exit 1
  #     - run:
  #         name: Add back-end ip to ansible inventory
  #         command: |
  #           # Your code here
  #           exit 1
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project/.circleci/ansible/inventory.txt
  #     - destroy-environment:
  #         workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'  
  #         # Here's where you will add some code to rollback on failure      

  # configure-infrastructure:
  #   << : *pyimg
  #   environment:
  #     NODE_ENV: "production"
  #     VERSION: "1"
  #     ENVIRONMENT: "production"
  #     TYPEORM_CONNECTION: $TYPEORM_CONNECTION
  #     TYPEORM_HOST: $TYPEORM_HOST
  #     TYPEORM_USERNAME: $TYPEORM_USERNAME
  #     TYPEORM_PASSWORD: $TYPEORM_PASSWORD
  #     TYPEORM_DATABASE: $TYPEORM_DATABASE
  #     TYPEORM_PORT: $TYPEORM_PORT
  #     TYPEORM_ENTITIES: $TYPEORM_ENTITIES
  #   steps:
  #     # Checkout code from git
  #     - checkout

  #     # Add ssh keys with fingerprint
  #     # attach workspace
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # Your code here
  #           exit 1
  #     - run:
  #         name: Configure server
  #         command: |
  #           # Your code here
  #           exit 1
  #     # Here's where you will add some code to rollback on failure      

  # run-migrations:
  #   docker:
  #     # Docker image here that supports NodeJS
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Run migrations
  #         command: |
  #           # Your code here
  #           exit 1
  #     - run:
  #         name: Send migration results to memstash
  #         command: |
  #           # Your code here
  #           exit 1
  #    # Here's where you will add some code to rollback on failure      

  # deploy-frontend:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "${API_URL}"
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure      
                    
  # deploy-backend:
  #   docker:
  #     # Docker image here that supports Ansible
  #   steps:
  #     # Checkout code from git
  #     # Add ssh keys with fingerprint
  #     # attach workspace
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

  # smoke-test:
  #   docker:
  #     # Lightweight Docker image 
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           # your code here
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #     - image: amazon/aws-cli
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

  # cleanup:
  #     docker:
  #       # Docker image here
  #       - image: amazon/aws-cli
  #     steps:
  #       # Checkout code from git
  #       - run:
  #           name: Get old stack workflow id
  #           command: |
  #             # your code here
  #             export OldWorkflowID="the id here"
  #             export STACKS=[] #put the list of stacks here
  #       - run:
  #           name: Remove old stacks and files
  #           command: |
  #             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #             then
  #               # your code here
  #             fi
            

workflows:
  master-build:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]